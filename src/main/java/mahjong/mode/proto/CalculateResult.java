// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: majong_rpc.proto

package mahjong.mode.proto;

/**
 * <pre>
 * 麻将游戏计算结果
 * </pre>
 * <p>
 * Protobuf type {@code majong_rpc.CalculateResult}
 */
public final class CalculateResult extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:majong_rpc.CalculateResult)
        CalculateResultOrBuilder {
    // Use CalculateResult.newBuilder() to construct.
    private CalculateResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private CalculateResult() {
        chi_ = java.util.Collections.emptyList();
        peng_ = java.util.Collections.emptyList();
        gang_ = java.util.Collections.emptyList();
        hu_ = java.util.Collections.emptyList();
        zimo_ = java.util.Collections.emptyList();
        adjunct_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private CalculateResult(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            chi_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        chi_.add(input.readInt32());
                        break;
                    }
                    case 10: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                            chi_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            chi_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 16: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            peng_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        peng_.add(input.readInt32());
                        break;
                    }
                    case 18: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                            peng_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            peng_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 24: {
                        if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                            gang_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        gang_.add(input.readInt32());
                        break;
                    }
                    case 26: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                            gang_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            gang_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 32: {
                        if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                            hu_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000008;
                        }
                        hu_.add(input.readInt32());
                        break;
                    }
                    case 34: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                            hu_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000008;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            hu_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 40: {
                        if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                            zimo_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000010;
                        }
                        zimo_.add(input.readInt32());
                        break;
                    }
                    case 42: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                            zimo_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000010;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            zimo_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 50: {

                        adjunct_ = input.readBytes();
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                chi_ = java.util.Collections.unmodifiableList(chi_);
            }
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                peng_ = java.util.Collections.unmodifiableList(peng_);
            }
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                gang_ = java.util.Collections.unmodifiableList(gang_);
            }
            if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                hu_ = java.util.Collections.unmodifiableList(hu_);
            }
            if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                zimo_ = java.util.Collections.unmodifiableList(zimo_);
            }
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_CalculateResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_CalculateResult_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        mahjong.mode.proto.CalculateResult.class, mahjong.mode.proto.CalculateResult.Builder.class);
    }

    private int bitField0_;
    public static final int CHI_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> chi_;

    /**
     * <pre>
     * 能够吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chi = 1;</code>
     */
    public java.util.List<java.lang.Integer>
    getChiList() {
        return chi_;
    }

    /**
     * <pre>
     * 能够吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chi = 1;</code>
     */
    public int getChiCount() {
        return chi_.size();
    }

    /**
     * <pre>
     * 能够吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chi = 1;</code>
     */
    public int getChi(int index) {
        return chi_.get(index);
    }

    private int chiMemoizedSerializedSize = -1;

    public static final int PENG_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> peng_;

    /**
     * <pre>
     * 能够碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 peng = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getPengList() {
        return peng_;
    }

    /**
     * <pre>
     * 能够碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 peng = 2;</code>
     */
    public int getPengCount() {
        return peng_.size();
    }

    /**
     * <pre>
     * 能够碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 peng = 2;</code>
     */
    public int getPeng(int index) {
        return peng_.get(index);
    }

    private int pengMemoizedSerializedSize = -1;

    public static final int GANG_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> gang_;

    /**
     * <pre>
     * 能够杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 gang = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getGangList() {
        return gang_;
    }

    /**
     * <pre>
     * 能够杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 gang = 3;</code>
     */
    public int getGangCount() {
        return gang_.size();
    }

    /**
     * <pre>
     * 能够杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 gang = 3;</code>
     */
    public int getGang(int index) {
        return gang_.get(index);
    }

    private int gangMemoizedSerializedSize = -1;

    public static final int HU_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> hu_;

    /**
     * <pre>
     * 能够胡的牌
     * </pre>
     * <p>
     * <code>repeated int32 hu = 4;</code>
     */
    public java.util.List<java.lang.Integer>
    getHuList() {
        return hu_;
    }

    /**
     * <pre>
     * 能够胡的牌
     * </pre>
     * <p>
     * <code>repeated int32 hu = 4;</code>
     */
    public int getHuCount() {
        return hu_.size();
    }

    /**
     * <pre>
     * 能够胡的牌
     * </pre>
     * <p>
     * <code>repeated int32 hu = 4;</code>
     */
    public int getHu(int index) {
        return hu_.get(index);
    }

    private int huMemoizedSerializedSize = -1;

    public static final int ZIMO_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> zimo_;

    /**
     * <pre>
     * 能自摸的牌
     * </pre>
     * <p>
     * <code>repeated int32 zimo = 5;</code>
     */
    public java.util.List<java.lang.Integer>
    getZimoList() {
        return zimo_;
    }

    /**
     * <pre>
     * 能自摸的牌
     * </pre>
     * <p>
     * <code>repeated int32 zimo = 5;</code>
     */
    public int getZimoCount() {
        return zimo_.size();
    }

    /**
     * <pre>
     * 能自摸的牌
     * </pre>
     * <p>
     * <code>repeated int32 zimo = 5;</code>
     */
    public int getZimo(int index) {
        return zimo_.get(index);
    }

    private int zimoMemoizedSerializedSize = -1;

    public static final int ADJUNCT_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString adjunct_;

    /**
     * <pre>
     * 附加操作
     * </pre>
     * <p>
     * <code>bytes adjunct = 6;</code>
     */
    public com.google.protobuf.ByteString getAdjunct() {
        return adjunct_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        getSerializedSize();
        if (getChiList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(chiMemoizedSerializedSize);
        }
        for (int i = 0; i < chi_.size(); i++) {
            output.writeInt32NoTag(chi_.get(i));
        }
        if (getPengList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(pengMemoizedSerializedSize);
        }
        for (int i = 0; i < peng_.size(); i++) {
            output.writeInt32NoTag(peng_.get(i));
        }
        if (getGangList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(gangMemoizedSerializedSize);
        }
        for (int i = 0; i < gang_.size(); i++) {
            output.writeInt32NoTag(gang_.get(i));
        }
        if (getHuList().size() > 0) {
            output.writeUInt32NoTag(34);
            output.writeUInt32NoTag(huMemoizedSerializedSize);
        }
        for (int i = 0; i < hu_.size(); i++) {
            output.writeInt32NoTag(hu_.get(i));
        }
        if (getZimoList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(zimoMemoizedSerializedSize);
        }
        for (int i = 0; i < zimo_.size(); i++) {
            output.writeInt32NoTag(zimo_.get(i));
        }
        if (!adjunct_.isEmpty()) {
            output.writeBytes(6, adjunct_);
        }
    }

    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
            int dataSize = 0;
            for (int i = 0; i < chi_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(chi_.get(i));
            }
            size += dataSize;
            if (!getChiList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            chiMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < peng_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(peng_.get(i));
            }
            size += dataSize;
            if (!getPengList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            pengMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < gang_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(gang_.get(i));
            }
            size += dataSize;
            if (!getGangList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            gangMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < hu_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(hu_.get(i));
            }
            size += dataSize;
            if (!getHuList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            huMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < zimo_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(zimo_.get(i));
            }
            size += dataSize;
            if (!getZimoList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            zimoMemoizedSerializedSize = dataSize;
        }
        if (!adjunct_.isEmpty()) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBytesSize(6, adjunct_);
        }
        memoizedSize = size;
        return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof mahjong.mode.proto.CalculateResult)) {
            return super.equals(obj);
        }
        mahjong.mode.proto.CalculateResult other = (mahjong.mode.proto.CalculateResult) obj;

        boolean result = true;
        result = result && getChiList()
                .equals(other.getChiList());
        result = result && getPengList()
                .equals(other.getPengList());
        result = result && getGangList()
                .equals(other.getGangList());
        result = result && getHuList()
                .equals(other.getHuList());
        result = result && getZimoList()
                .equals(other.getZimoList());
        result = result && getAdjunct()
                .equals(other.getAdjunct());
        return result;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getChiCount() > 0) {
            hash = (37 * hash) + CHI_FIELD_NUMBER;
            hash = (53 * hash) + getChiList().hashCode();
        }
        if (getPengCount() > 0) {
            hash = (37 * hash) + PENG_FIELD_NUMBER;
            hash = (53 * hash) + getPengList().hashCode();
        }
        if (getGangCount() > 0) {
            hash = (37 * hash) + GANG_FIELD_NUMBER;
            hash = (53 * hash) + getGangList().hashCode();
        }
        if (getHuCount() > 0) {
            hash = (37 * hash) + HU_FIELD_NUMBER;
            hash = (53 * hash) + getHuList().hashCode();
        }
        if (getZimoCount() > 0) {
            hash = (37 * hash) + ZIMO_FIELD_NUMBER;
            hash = (53 * hash) + getZimoList().hashCode();
        }
        hash = (37 * hash) + ADJUNCT_FIELD_NUMBER;
        hash = (53 * hash) + getAdjunct().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.CalculateResult parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.CalculateResult parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.CalculateResult parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(mahjong.mode.proto.CalculateResult prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * <pre>
     * 麻将游戏计算结果
     * </pre>
     * <p>
     * Protobuf type {@code majong_rpc.CalculateResult}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:majong_rpc.CalculateResult)
            mahjong.mode.proto.CalculateResultOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_CalculateResult_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_CalculateResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.proto.CalculateResult.class, mahjong.mode.proto.CalculateResult.Builder.class);
        }

        // Construct using mahjong.mode.proto.CalculateResult.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        public Builder clear() {
            super.clear();
            chi_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            peng_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            gang_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            hu_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            zimo_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            adjunct_ = com.google.protobuf.ByteString.EMPTY;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_CalculateResult_descriptor;
        }

        public mahjong.mode.proto.CalculateResult getDefaultInstanceForType() {
            return mahjong.mode.proto.CalculateResult.getDefaultInstance();
        }

        public mahjong.mode.proto.CalculateResult build() {
            mahjong.mode.proto.CalculateResult result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.proto.CalculateResult buildPartial() {
            mahjong.mode.proto.CalculateResult result = new mahjong.mode.proto.CalculateResult(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                chi_ = java.util.Collections.unmodifiableList(chi_);
                bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.chi_ = chi_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                peng_ = java.util.Collections.unmodifiableList(peng_);
                bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.peng_ = peng_;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                gang_ = java.util.Collections.unmodifiableList(gang_);
                bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.gang_ = gang_;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                hu_ = java.util.Collections.unmodifiableList(hu_);
                bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.hu_ = hu_;
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                zimo_ = java.util.Collections.unmodifiableList(zimo_);
                bitField0_ = (bitField0_ & ~0x00000010);
            }
            result.zimo_ = zimo_;
            result.adjunct_ = adjunct_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof mahjong.mode.proto.CalculateResult) {
                return mergeFrom((mahjong.mode.proto.CalculateResult) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(mahjong.mode.proto.CalculateResult other) {
            if (other == mahjong.mode.proto.CalculateResult.getDefaultInstance()) return this;
            if (!other.chi_.isEmpty()) {
                if (chi_.isEmpty()) {
                    chi_ = other.chi_;
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    ensureChiIsMutable();
                    chi_.addAll(other.chi_);
                }
                onChanged();
            }
            if (!other.peng_.isEmpty()) {
                if (peng_.isEmpty()) {
                    peng_ = other.peng_;
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    ensurePengIsMutable();
                    peng_.addAll(other.peng_);
                }
                onChanged();
            }
            if (!other.gang_.isEmpty()) {
                if (gang_.isEmpty()) {
                    gang_ = other.gang_;
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    ensureGangIsMutable();
                    gang_.addAll(other.gang_);
                }
                onChanged();
            }
            if (!other.hu_.isEmpty()) {
                if (hu_.isEmpty()) {
                    hu_ = other.hu_;
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    ensureHuIsMutable();
                    hu_.addAll(other.hu_);
                }
                onChanged();
            }
            if (!other.zimo_.isEmpty()) {
                if (zimo_.isEmpty()) {
                    zimo_ = other.zimo_;
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    ensureZimoIsMutable();
                    zimo_.addAll(other.zimo_);
                }
                onChanged();
            }
            if (other.getAdjunct() != com.google.protobuf.ByteString.EMPTY) {
                setAdjunct(other.getAdjunct());
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            mahjong.mode.proto.CalculateResult parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (mahjong.mode.proto.CalculateResult) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private java.util.List<java.lang.Integer> chi_ = java.util.Collections.emptyList();

        private void ensureChiIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                chi_ = new java.util.ArrayList<java.lang.Integer>(chi_);
                bitField0_ |= 0x00000001;
            }
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public java.util.List<java.lang.Integer>
        getChiList() {
            return java.util.Collections.unmodifiableList(chi_);
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public int getChiCount() {
            return chi_.size();
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public int getChi(int index) {
            return chi_.get(index);
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public Builder setChi(
                int index, int value) {
            ensureChiIsMutable();
            chi_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public Builder addChi(int value) {
            ensureChiIsMutable();
            chi_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public Builder addAllChi(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureChiIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, chi_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chi = 1;</code>
         */
        public Builder clearChi() {
            chi_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
        }

        private java.util.List<java.lang.Integer> peng_ = java.util.Collections.emptyList();

        private void ensurePengIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                peng_ = new java.util.ArrayList<java.lang.Integer>(peng_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public java.util.List<java.lang.Integer>
        getPengList() {
            return java.util.Collections.unmodifiableList(peng_);
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public int getPengCount() {
            return peng_.size();
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public int getPeng(int index) {
            return peng_.get(index);
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public Builder setPeng(
                int index, int value) {
            ensurePengIsMutable();
            peng_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public Builder addPeng(int value) {
            ensurePengIsMutable();
            peng_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public Builder addAllPeng(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensurePengIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, peng_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 peng = 2;</code>
         */
        public Builder clearPeng() {
            peng_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
            return this;
        }

        private java.util.List<java.lang.Integer> gang_ = java.util.Collections.emptyList();

        private void ensureGangIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                gang_ = new java.util.ArrayList<java.lang.Integer>(gang_);
                bitField0_ |= 0x00000004;
            }
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getGangList() {
            return java.util.Collections.unmodifiableList(gang_);
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public int getGangCount() {
            return gang_.size();
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public int getGang(int index) {
            return gang_.get(index);
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public Builder setGang(
                int index, int value) {
            ensureGangIsMutable();
            gang_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public Builder addGang(int value) {
            ensureGangIsMutable();
            gang_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public Builder addAllGang(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureGangIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, gang_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gang = 3;</code>
         */
        public Builder clearGang() {
            gang_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
            return this;
        }

        private java.util.List<java.lang.Integer> hu_ = java.util.Collections.emptyList();

        private void ensureHuIsMutable() {
            if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                hu_ = new java.util.ArrayList<java.lang.Integer>(hu_);
                bitField0_ |= 0x00000008;
            }
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public java.util.List<java.lang.Integer>
        getHuList() {
            return java.util.Collections.unmodifiableList(hu_);
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public int getHuCount() {
            return hu_.size();
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public int getHu(int index) {
            return hu_.get(index);
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public Builder setHu(
                int index, int value) {
            ensureHuIsMutable();
            hu_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public Builder addHu(int value) {
            ensureHuIsMutable();
            hu_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public Builder addAllHu(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureHuIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, hu_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能够胡的牌
         * </pre>
         * <p>
         * <code>repeated int32 hu = 4;</code>
         */
        public Builder clearHu() {
            hu_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
            return this;
        }

        private java.util.List<java.lang.Integer> zimo_ = java.util.Collections.emptyList();

        private void ensureZimoIsMutable() {
            if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                zimo_ = new java.util.ArrayList<java.lang.Integer>(zimo_);
                bitField0_ |= 0x00000010;
            }
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getZimoList() {
            return java.util.Collections.unmodifiableList(zimo_);
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public int getZimoCount() {
            return zimo_.size();
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public int getZimo(int index) {
            return zimo_.get(index);
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public Builder setZimo(
                int index, int value) {
            ensureZimoIsMutable();
            zimo_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public Builder addZimo(int value) {
            ensureZimoIsMutable();
            zimo_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public Builder addAllZimo(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureZimoIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, zimo_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 能自摸的牌
         * </pre>
         * <p>
         * <code>repeated int32 zimo = 5;</code>
         */
        public Builder clearZimo() {
            zimo_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            onChanged();
            return this;
        }

        private com.google.protobuf.ByteString adjunct_ = com.google.protobuf.ByteString.EMPTY;

        /**
         * <pre>
         * 附加操作
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public com.google.protobuf.ByteString getAdjunct() {
            return adjunct_;
        }

        /**
         * <pre>
         * 附加操作
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public Builder setAdjunct(com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }

            adjunct_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 附加操作
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public Builder clearAdjunct() {

            adjunct_ = getDefaultInstance().getAdjunct();
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }


        // @@protoc_insertion_point(builder_scope:majong_rpc.CalculateResult)
    }

    // @@protoc_insertion_point(class_scope:majong_rpc.CalculateResult)
    private static final mahjong.mode.proto.CalculateResult DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new mahjong.mode.proto.CalculateResult();
    }

    public static mahjong.mode.proto.CalculateResult getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CalculateResult>
            PARSER = new com.google.protobuf.AbstractParser<CalculateResult>() {
        public CalculateResult parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new CalculateResult(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<CalculateResult> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CalculateResult> getParserForType() {
        return PARSER;
    }

    public mahjong.mode.proto.CalculateResult getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

