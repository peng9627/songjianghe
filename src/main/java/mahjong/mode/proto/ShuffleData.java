// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: majong_rpc.proto

package mahjong.mode.proto;

/**
 * <pre>
 * 申请洗牌的数据
 * </pre>
 * <p>
 * Protobuf type {@code majong_rpc.ShuffleData}
 */
public final class ShuffleData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:majong_rpc.ShuffleData)
        ShuffleDataOrBuilder {
    // Use ShuffleData.newBuilder() to construct.
    private ShuffleData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private ShuffleData() {
        allocId_ = 0;
        cheats_ = java.util.Collections.emptyList();
        adjunct_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private ShuffleData(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {

                        allocId_ = input.readInt32();
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            cheats_ = new java.util.ArrayList<mahjong.mode.proto.CheatData>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        cheats_.add(
                                input.readMessage(mahjong.mode.proto.CheatData.parser(), extensionRegistry));
                        break;
                    }
                    case 26: {

                        adjunct_ = input.readBytes();
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cheats_ = java.util.Collections.unmodifiableList(cheats_);
            }
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_ShuffleData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_ShuffleData_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        mahjong.mode.proto.ShuffleData.class, mahjong.mode.proto.ShuffleData.Builder.class);
    }

    private int bitField0_;
    public static final int ALLOC_ID_FIELD_NUMBER = 1;
    private int allocId_;

    /**
     * <code>int32 alloc_id = 1;</code>
     */
    public int getAllocId() {
        return allocId_;
    }

    public static final int CHEATS_FIELD_NUMBER = 2;
    private java.util.List<mahjong.mode.proto.CheatData> cheats_;

    /**
     * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
     */
    public java.util.List<mahjong.mode.proto.CheatData> getCheatsList() {
        return cheats_;
    }

    /**
     * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
     */
    public java.util.List<? extends mahjong.mode.proto.CheatDataOrBuilder>
    getCheatsOrBuilderList() {
        return cheats_;
    }

    /**
     * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
     */
    public int getCheatsCount() {
        return cheats_.size();
    }

    /**
     * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
     */
    public mahjong.mode.proto.CheatData getCheats(int index) {
        return cheats_.get(index);
    }

    /**
     * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
     */
    public mahjong.mode.proto.CheatDataOrBuilder getCheatsOrBuilder(
            int index) {
        return cheats_.get(index);
    }

    public static final int ADJUNCT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString adjunct_;

    /**
     * <code>bytes adjunct = 3;</code>
     */
    public com.google.protobuf.ByteString getAdjunct() {
        return adjunct_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (allocId_ != 0) {
            output.writeInt32(1, allocId_);
        }
        for (int i = 0; i < cheats_.size(); i++) {
            output.writeMessage(2, cheats_.get(i));
        }
        if (!adjunct_.isEmpty()) {
            output.writeBytes(3, adjunct_);
        }
    }

    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (allocId_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(1, allocId_);
        }
        for (int i = 0; i < cheats_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(2, cheats_.get(i));
        }
        if (!adjunct_.isEmpty()) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBytesSize(3, adjunct_);
        }
        memoizedSize = size;
        return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof mahjong.mode.proto.ShuffleData)) {
            return super.equals(obj);
        }
        mahjong.mode.proto.ShuffleData other = (mahjong.mode.proto.ShuffleData) obj;

        boolean result = true;
        result = result && (getAllocId()
                == other.getAllocId());
        result = result && getCheatsList()
                .equals(other.getCheatsList());
        result = result && getAdjunct()
                .equals(other.getAdjunct());
        return result;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ALLOC_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAllocId();
        if (getCheatsCount() > 0) {
            hash = (37 * hash) + CHEATS_FIELD_NUMBER;
            hash = (53 * hash) + getCheatsList().hashCode();
        }
        hash = (37 * hash) + ADJUNCT_FIELD_NUMBER;
        hash = (53 * hash) + getAdjunct().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.ShuffleData parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.ShuffleData parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.ShuffleData parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(mahjong.mode.proto.ShuffleData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * <pre>
     * 申请洗牌的数据
     * </pre>
     * <p>
     * Protobuf type {@code majong_rpc.ShuffleData}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:majong_rpc.ShuffleData)
            mahjong.mode.proto.ShuffleDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_ShuffleData_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_ShuffleData_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.proto.ShuffleData.class, mahjong.mode.proto.ShuffleData.Builder.class);
        }

        // Construct using mahjong.mode.proto.ShuffleData.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getCheatsFieldBuilder();
            }
        }

        public Builder clear() {
            super.clear();
            allocId_ = 0;

            if (cheatsBuilder_ == null) {
                cheats_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                cheatsBuilder_.clear();
            }
            adjunct_ = com.google.protobuf.ByteString.EMPTY;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_ShuffleData_descriptor;
        }

        public mahjong.mode.proto.ShuffleData getDefaultInstanceForType() {
            return mahjong.mode.proto.ShuffleData.getDefaultInstance();
        }

        public mahjong.mode.proto.ShuffleData build() {
            mahjong.mode.proto.ShuffleData result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.proto.ShuffleData buildPartial() {
            mahjong.mode.proto.ShuffleData result = new mahjong.mode.proto.ShuffleData(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.allocId_ = allocId_;
            if (cheatsBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    cheats_ = java.util.Collections.unmodifiableList(cheats_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.cheats_ = cheats_;
            } else {
                result.cheats_ = cheatsBuilder_.build();
            }
            result.adjunct_ = adjunct_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof mahjong.mode.proto.ShuffleData) {
                return mergeFrom((mahjong.mode.proto.ShuffleData) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(mahjong.mode.proto.ShuffleData other) {
            if (other == mahjong.mode.proto.ShuffleData.getDefaultInstance()) return this;
            if (other.getAllocId() != 0) {
                setAllocId(other.getAllocId());
            }
            if (cheatsBuilder_ == null) {
                if (!other.cheats_.isEmpty()) {
                    if (cheats_.isEmpty()) {
                        cheats_ = other.cheats_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureCheatsIsMutable();
                        cheats_.addAll(other.cheats_);
                    }
                    onChanged();
                }
            } else {
                if (!other.cheats_.isEmpty()) {
                    if (cheatsBuilder_.isEmpty()) {
                        cheatsBuilder_.dispose();
                        cheatsBuilder_ = null;
                        cheats_ = other.cheats_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        cheatsBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getCheatsFieldBuilder() : null;
                    } else {
                        cheatsBuilder_.addAllMessages(other.cheats_);
                    }
                }
            }
            if (other.getAdjunct() != com.google.protobuf.ByteString.EMPTY) {
                setAdjunct(other.getAdjunct());
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            mahjong.mode.proto.ShuffleData parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (mahjong.mode.proto.ShuffleData) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private int allocId_;

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public int getAllocId() {
            return allocId_;
        }

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public Builder setAllocId(int value) {

            allocId_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public Builder clearAllocId() {

            allocId_ = 0;
            onChanged();
            return this;
        }

        private java.util.List<mahjong.mode.proto.CheatData> cheats_ =
                java.util.Collections.emptyList();

        private void ensureCheatsIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                cheats_ = new java.util.ArrayList<mahjong.mode.proto.CheatData>(cheats_);
                bitField0_ |= 0x00000002;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                mahjong.mode.proto.CheatData, mahjong.mode.proto.CheatData.Builder, mahjong.mode.proto.CheatDataOrBuilder> cheatsBuilder_;

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public java.util.List<mahjong.mode.proto.CheatData> getCheatsList() {
            if (cheatsBuilder_ == null) {
                return java.util.Collections.unmodifiableList(cheats_);
            } else {
                return cheatsBuilder_.getMessageList();
            }
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public int getCheatsCount() {
            if (cheatsBuilder_ == null) {
                return cheats_.size();
            } else {
                return cheatsBuilder_.getCount();
            }
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public mahjong.mode.proto.CheatData getCheats(int index) {
            if (cheatsBuilder_ == null) {
                return cheats_.get(index);
            } else {
                return cheatsBuilder_.getMessage(index);
            }
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder setCheats(
                int index, mahjong.mode.proto.CheatData value) {
            if (cheatsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCheatsIsMutable();
                cheats_.set(index, value);
                onChanged();
            } else {
                cheatsBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder setCheats(
                int index, mahjong.mode.proto.CheatData.Builder builderForValue) {
            if (cheatsBuilder_ == null) {
                ensureCheatsIsMutable();
                cheats_.set(index, builderForValue.build());
                onChanged();
            } else {
                cheatsBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder addCheats(mahjong.mode.proto.CheatData value) {
            if (cheatsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCheatsIsMutable();
                cheats_.add(value);
                onChanged();
            } else {
                cheatsBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder addCheats(
                int index, mahjong.mode.proto.CheatData value) {
            if (cheatsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCheatsIsMutable();
                cheats_.add(index, value);
                onChanged();
            } else {
                cheatsBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder addCheats(
                mahjong.mode.proto.CheatData.Builder builderForValue) {
            if (cheatsBuilder_ == null) {
                ensureCheatsIsMutable();
                cheats_.add(builderForValue.build());
                onChanged();
            } else {
                cheatsBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder addCheats(
                int index, mahjong.mode.proto.CheatData.Builder builderForValue) {
            if (cheatsBuilder_ == null) {
                ensureCheatsIsMutable();
                cheats_.add(index, builderForValue.build());
                onChanged();
            } else {
                cheatsBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder addAllCheats(
                java.lang.Iterable<? extends mahjong.mode.proto.CheatData> values) {
            if (cheatsBuilder_ == null) {
                ensureCheatsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cheats_);
                onChanged();
            } else {
                cheatsBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder clearCheats() {
            if (cheatsBuilder_ == null) {
                cheats_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                cheatsBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public Builder removeCheats(int index) {
            if (cheatsBuilder_ == null) {
                ensureCheatsIsMutable();
                cheats_.remove(index);
                onChanged();
            } else {
                cheatsBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public mahjong.mode.proto.CheatData.Builder getCheatsBuilder(
                int index) {
            return getCheatsFieldBuilder().getBuilder(index);
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public mahjong.mode.proto.CheatDataOrBuilder getCheatsOrBuilder(
                int index) {
            if (cheatsBuilder_ == null) {
                return cheats_.get(index);
            } else {
                return cheatsBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public java.util.List<? extends mahjong.mode.proto.CheatDataOrBuilder>
        getCheatsOrBuilderList() {
            if (cheatsBuilder_ != null) {
                return cheatsBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(cheats_);
            }
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public mahjong.mode.proto.CheatData.Builder addCheatsBuilder() {
            return getCheatsFieldBuilder().addBuilder(
                    mahjong.mode.proto.CheatData.getDefaultInstance());
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public mahjong.mode.proto.CheatData.Builder addCheatsBuilder(
                int index) {
            return getCheatsFieldBuilder().addBuilder(
                    index, mahjong.mode.proto.CheatData.getDefaultInstance());
        }

        /**
         * <code>repeated .majong_rpc.CheatData cheats = 2;</code>
         */
        public java.util.List<mahjong.mode.proto.CheatData.Builder>
        getCheatsBuilderList() {
            return getCheatsFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                mahjong.mode.proto.CheatData, mahjong.mode.proto.CheatData.Builder, mahjong.mode.proto.CheatDataOrBuilder>
        getCheatsFieldBuilder() {
            if (cheatsBuilder_ == null) {
                cheatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        mahjong.mode.proto.CheatData, mahjong.mode.proto.CheatData.Builder, mahjong.mode.proto.CheatDataOrBuilder>(
                        cheats_,
                        ((bitField0_ & 0x00000002) == 0x00000002),
                        getParentForChildren(),
                        isClean());
                cheats_ = null;
            }
            return cheatsBuilder_;
        }

        private com.google.protobuf.ByteString adjunct_ = com.google.protobuf.ByteString.EMPTY;

        /**
         * <code>bytes adjunct = 3;</code>
         */
        public com.google.protobuf.ByteString getAdjunct() {
            return adjunct_;
        }

        /**
         * <code>bytes adjunct = 3;</code>
         */
        public Builder setAdjunct(com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }

            adjunct_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>bytes adjunct = 3;</code>
         */
        public Builder clearAdjunct() {

            adjunct_ = getDefaultInstance().getAdjunct();
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }


        // @@protoc_insertion_point(builder_scope:majong_rpc.ShuffleData)
    }

    // @@protoc_insertion_point(class_scope:majong_rpc.ShuffleData)
    private static final mahjong.mode.proto.ShuffleData DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new mahjong.mode.proto.ShuffleData();
    }

    public static mahjong.mode.proto.ShuffleData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ShuffleData>
            PARSER = new com.google.protobuf.AbstractParser<ShuffleData>() {
        public ShuffleData parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new ShuffleData(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<ShuffleData> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ShuffleData> getParserForType() {
        return PARSER;
    }

    public mahjong.mode.proto.ShuffleData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

