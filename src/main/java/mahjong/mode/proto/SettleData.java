// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: majong_rpc.proto

package mahjong.mode.proto;

/**
 * Protobuf type {@code majong_rpc.SettleData}
 */
public final class SettleData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:majong_rpc.SettleData)
        SettleDataOrBuilder {
    // Use SettleData.newBuilder() to construct.
    private SettleData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private SettleData() {
        allocId_ = 0;
        playerList_ = java.util.Collections.emptyList();
        gangCombo_ = 0;
        banker_ = 0;
        bankerCombo_ = 0;
        adjunct_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private SettleData(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {

                        allocId_ = input.readInt32();
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            playerList_ = new java.util.ArrayList<mahjong.mode.proto.SettlePlayerData>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        playerList_.add(
                                input.readMessage(mahjong.mode.proto.SettlePlayerData.parser(), extensionRegistry));
                        break;
                    }
                    case 24: {

                        gangCombo_ = input.readInt32();
                        break;
                    }
                    case 32: {

                        banker_ = input.readInt32();
                        break;
                    }
                    case 40: {

                        bankerCombo_ = input.readInt32();
                        break;
                    }
                    case 50: {

                        adjunct_ = input.readBytes();
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                playerList_ = java.util.Collections.unmodifiableList(playerList_);
            }
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_SettleData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_SettleData_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        mahjong.mode.proto.SettleData.class, mahjong.mode.proto.SettleData.Builder.class);
    }

    private int bitField0_;
    public static final int ALLOC_ID_FIELD_NUMBER = 1;
    private int allocId_;

    /**
     * <code>int32 alloc_id = 1;</code>
     */
    public int getAllocId() {
        return allocId_;
    }

    public static final int PLAYER_LIST_FIELD_NUMBER = 2;
    private java.util.List<mahjong.mode.proto.SettlePlayerData> playerList_;

    /**
     * <pre>
     * 玩家数据
     * </pre>
     * <p>
     * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
     */
    public java.util.List<mahjong.mode.proto.SettlePlayerData> getPlayerListList() {
        return playerList_;
    }

    /**
     * <pre>
     * 玩家数据
     * </pre>
     * <p>
     * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
     */
    public java.util.List<? extends mahjong.mode.proto.SettlePlayerDataOrBuilder>
    getPlayerListOrBuilderList() {
        return playerList_;
    }

    /**
     * <pre>
     * 玩家数据
     * </pre>
     * <p>
     * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
     */
    public int getPlayerListCount() {
        return playerList_.size();
    }

    /**
     * <pre>
     * 玩家数据
     * </pre>
     * <p>
     * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
     */
    public mahjong.mode.proto.SettlePlayerData getPlayerList(int index) {
        return playerList_.get(index);
    }

    /**
     * <pre>
     * 玩家数据
     * </pre>
     * <p>
     * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
     */
    public mahjong.mode.proto.SettlePlayerDataOrBuilder getPlayerListOrBuilder(
            int index) {
        return playerList_.get(index);
    }

    public static final int GANG_COMBO_FIELD_NUMBER = 3;
    private int gangCombo_;

    /**
     * <pre>
     * 连续杠牌的次数
     * </pre>
     * <p>
     * <code>int32 gang_combo = 3;</code>
     */
    public int getGangCombo() {
        return gangCombo_;
    }

    public static final int BANKER_FIELD_NUMBER = 4;
    private int banker_;

    /**
     * <pre>
     * 本轮游戏的庄家ID
     * </pre>
     * <p>
     * <code>int32 banker = 4;</code>
     */
    public int getBanker() {
        return banker_;
    }

    public static final int BANKER_COMBO_FIELD_NUMBER = 5;
    private int bankerCombo_;

    /**
     * <pre>
     * 连续当庄家的次数（第一次当，值为1，第二次，值为2）
     * </pre>
     * <p>
     * <code>int32 banker_combo = 5;</code>
     */
    public int getBankerCombo() {
        return bankerCombo_;
    }

    public static final int ADJUNCT_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString adjunct_;

    /**
     * <pre>
     * 附加的一些判断条件
     * </pre>
     * <p>
     * <code>bytes adjunct = 6;</code>
     */
    public com.google.protobuf.ByteString getAdjunct() {
        return adjunct_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (allocId_ != 0) {
            output.writeInt32(1, allocId_);
        }
        for (int i = 0; i < playerList_.size(); i++) {
            output.writeMessage(2, playerList_.get(i));
        }
        if (gangCombo_ != 0) {
            output.writeInt32(3, gangCombo_);
        }
        if (banker_ != 0) {
            output.writeInt32(4, banker_);
        }
        if (bankerCombo_ != 0) {
            output.writeInt32(5, bankerCombo_);
        }
        if (!adjunct_.isEmpty()) {
            output.writeBytes(6, adjunct_);
        }
    }

    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (allocId_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(1, allocId_);
        }
        for (int i = 0; i < playerList_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(2, playerList_.get(i));
        }
        if (gangCombo_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(3, gangCombo_);
        }
        if (banker_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(4, banker_);
        }
        if (bankerCombo_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(5, bankerCombo_);
        }
        if (!adjunct_.isEmpty()) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBytesSize(6, adjunct_);
        }
        memoizedSize = size;
        return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof mahjong.mode.proto.SettleData)) {
            return super.equals(obj);
        }
        mahjong.mode.proto.SettleData other = (mahjong.mode.proto.SettleData) obj;

        boolean result = true;
        result = result && (getAllocId()
                == other.getAllocId());
        result = result && getPlayerListList()
                .equals(other.getPlayerListList());
        result = result && (getGangCombo()
                == other.getGangCombo());
        result = result && (getBanker()
                == other.getBanker());
        result = result && (getBankerCombo()
                == other.getBankerCombo());
        result = result && getAdjunct()
                .equals(other.getAdjunct());
        return result;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ALLOC_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAllocId();
        if (getPlayerListCount() > 0) {
            hash = (37 * hash) + PLAYER_LIST_FIELD_NUMBER;
            hash = (53 * hash) + getPlayerListList().hashCode();
        }
        hash = (37 * hash) + GANG_COMBO_FIELD_NUMBER;
        hash = (53 * hash) + getGangCombo();
        hash = (37 * hash) + BANKER_FIELD_NUMBER;
        hash = (53 * hash) + getBanker();
        hash = (37 * hash) + BANKER_COMBO_FIELD_NUMBER;
        hash = (53 * hash) + getBankerCombo();
        hash = (37 * hash) + ADJUNCT_FIELD_NUMBER;
        hash = (53 * hash) + getAdjunct().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SettleData parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SettleData parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.SettleData parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SettleData parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SettleData parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(mahjong.mode.proto.SettleData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code majong_rpc.SettleData}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:majong_rpc.SettleData)
            mahjong.mode.proto.SettleDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_SettleData_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_SettleData_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.proto.SettleData.class, mahjong.mode.proto.SettleData.Builder.class);
        }

        // Construct using mahjong.mode.proto.SettleData.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getPlayerListFieldBuilder();
            }
        }

        public Builder clear() {
            super.clear();
            allocId_ = 0;

            if (playerListBuilder_ == null) {
                playerList_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                playerListBuilder_.clear();
            }
            gangCombo_ = 0;

            banker_ = 0;

            bankerCombo_ = 0;

            adjunct_ = com.google.protobuf.ByteString.EMPTY;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.proto.MajongRpcProto.internal_static_majong_rpc_SettleData_descriptor;
        }

        public mahjong.mode.proto.SettleData getDefaultInstanceForType() {
            return mahjong.mode.proto.SettleData.getDefaultInstance();
        }

        public mahjong.mode.proto.SettleData build() {
            mahjong.mode.proto.SettleData result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.proto.SettleData buildPartial() {
            mahjong.mode.proto.SettleData result = new mahjong.mode.proto.SettleData(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.allocId_ = allocId_;
            if (playerListBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    playerList_ = java.util.Collections.unmodifiableList(playerList_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.playerList_ = playerList_;
            } else {
                result.playerList_ = playerListBuilder_.build();
            }
            result.gangCombo_ = gangCombo_;
            result.banker_ = banker_;
            result.bankerCombo_ = bankerCombo_;
            result.adjunct_ = adjunct_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof mahjong.mode.proto.SettleData) {
                return mergeFrom((mahjong.mode.proto.SettleData) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(mahjong.mode.proto.SettleData other) {
            if (other == mahjong.mode.proto.SettleData.getDefaultInstance()) return this;
            if (other.getAllocId() != 0) {
                setAllocId(other.getAllocId());
            }
            if (playerListBuilder_ == null) {
                if (!other.playerList_.isEmpty()) {
                    if (playerList_.isEmpty()) {
                        playerList_ = other.playerList_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensurePlayerListIsMutable();
                        playerList_.addAll(other.playerList_);
                    }
                    onChanged();
                }
            } else {
                if (!other.playerList_.isEmpty()) {
                    if (playerListBuilder_.isEmpty()) {
                        playerListBuilder_.dispose();
                        playerListBuilder_ = null;
                        playerList_ = other.playerList_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        playerListBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getPlayerListFieldBuilder() : null;
                    } else {
                        playerListBuilder_.addAllMessages(other.playerList_);
                    }
                }
            }
            if (other.getGangCombo() != 0) {
                setGangCombo(other.getGangCombo());
            }
            if (other.getBanker() != 0) {
                setBanker(other.getBanker());
            }
            if (other.getBankerCombo() != 0) {
                setBankerCombo(other.getBankerCombo());
            }
            if (other.getAdjunct() != com.google.protobuf.ByteString.EMPTY) {
                setAdjunct(other.getAdjunct());
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            mahjong.mode.proto.SettleData parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (mahjong.mode.proto.SettleData) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private int allocId_;

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public int getAllocId() {
            return allocId_;
        }

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public Builder setAllocId(int value) {

            allocId_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>int32 alloc_id = 1;</code>
         */
        public Builder clearAllocId() {

            allocId_ = 0;
            onChanged();
            return this;
        }

        private java.util.List<mahjong.mode.proto.SettlePlayerData> playerList_ =
                java.util.Collections.emptyList();

        private void ensurePlayerListIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                playerList_ = new java.util.ArrayList<mahjong.mode.proto.SettlePlayerData>(playerList_);
                bitField0_ |= 0x00000002;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                mahjong.mode.proto.SettlePlayerData, mahjong.mode.proto.SettlePlayerData.Builder, mahjong.mode.proto.SettlePlayerDataOrBuilder> playerListBuilder_;

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public java.util.List<mahjong.mode.proto.SettlePlayerData> getPlayerListList() {
            if (playerListBuilder_ == null) {
                return java.util.Collections.unmodifiableList(playerList_);
            } else {
                return playerListBuilder_.getMessageList();
            }
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public int getPlayerListCount() {
            if (playerListBuilder_ == null) {
                return playerList_.size();
            } else {
                return playerListBuilder_.getCount();
            }
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public mahjong.mode.proto.SettlePlayerData getPlayerList(int index) {
            if (playerListBuilder_ == null) {
                return playerList_.get(index);
            } else {
                return playerListBuilder_.getMessage(index);
            }
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder setPlayerList(
                int index, mahjong.mode.proto.SettlePlayerData value) {
            if (playerListBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensurePlayerListIsMutable();
                playerList_.set(index, value);
                onChanged();
            } else {
                playerListBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder setPlayerList(
                int index, mahjong.mode.proto.SettlePlayerData.Builder builderForValue) {
            if (playerListBuilder_ == null) {
                ensurePlayerListIsMutable();
                playerList_.set(index, builderForValue.build());
                onChanged();
            } else {
                playerListBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder addPlayerList(mahjong.mode.proto.SettlePlayerData value) {
            if (playerListBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensurePlayerListIsMutable();
                playerList_.add(value);
                onChanged();
            } else {
                playerListBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder addPlayerList(
                int index, mahjong.mode.proto.SettlePlayerData value) {
            if (playerListBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensurePlayerListIsMutable();
                playerList_.add(index, value);
                onChanged();
            } else {
                playerListBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder addPlayerList(
                mahjong.mode.proto.SettlePlayerData.Builder builderForValue) {
            if (playerListBuilder_ == null) {
                ensurePlayerListIsMutable();
                playerList_.add(builderForValue.build());
                onChanged();
            } else {
                playerListBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder addPlayerList(
                int index, mahjong.mode.proto.SettlePlayerData.Builder builderForValue) {
            if (playerListBuilder_ == null) {
                ensurePlayerListIsMutable();
                playerList_.add(index, builderForValue.build());
                onChanged();
            } else {
                playerListBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder addAllPlayerList(
                java.lang.Iterable<? extends mahjong.mode.proto.SettlePlayerData> values) {
            if (playerListBuilder_ == null) {
                ensurePlayerListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, playerList_);
                onChanged();
            } else {
                playerListBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder clearPlayerList() {
            if (playerListBuilder_ == null) {
                playerList_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                playerListBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public Builder removePlayerList(int index) {
            if (playerListBuilder_ == null) {
                ensurePlayerListIsMutable();
                playerList_.remove(index);
                onChanged();
            } else {
                playerListBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public mahjong.mode.proto.SettlePlayerData.Builder getPlayerListBuilder(
                int index) {
            return getPlayerListFieldBuilder().getBuilder(index);
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public mahjong.mode.proto.SettlePlayerDataOrBuilder getPlayerListOrBuilder(
                int index) {
            if (playerListBuilder_ == null) {
                return playerList_.get(index);
            } else {
                return playerListBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public java.util.List<? extends mahjong.mode.proto.SettlePlayerDataOrBuilder>
        getPlayerListOrBuilderList() {
            if (playerListBuilder_ != null) {
                return playerListBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(playerList_);
            }
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public mahjong.mode.proto.SettlePlayerData.Builder addPlayerListBuilder() {
            return getPlayerListFieldBuilder().addBuilder(
                    mahjong.mode.proto.SettlePlayerData.getDefaultInstance());
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public mahjong.mode.proto.SettlePlayerData.Builder addPlayerListBuilder(
                int index) {
            return getPlayerListFieldBuilder().addBuilder(
                    index, mahjong.mode.proto.SettlePlayerData.getDefaultInstance());
        }

        /**
         * <pre>
         * 玩家数据
         * </pre>
         * <p>
         * <code>repeated .majong_rpc.SettlePlayerData player_list = 2;</code>
         */
        public java.util.List<mahjong.mode.proto.SettlePlayerData.Builder>
        getPlayerListBuilderList() {
            return getPlayerListFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                mahjong.mode.proto.SettlePlayerData, mahjong.mode.proto.SettlePlayerData.Builder, mahjong.mode.proto.SettlePlayerDataOrBuilder>
        getPlayerListFieldBuilder() {
            if (playerListBuilder_ == null) {
                playerListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        mahjong.mode.proto.SettlePlayerData, mahjong.mode.proto.SettlePlayerData.Builder, mahjong.mode.proto.SettlePlayerDataOrBuilder>(
                        playerList_,
                        ((bitField0_ & 0x00000002) == 0x00000002),
                        getParentForChildren(),
                        isClean());
                playerList_ = null;
            }
            return playerListBuilder_;
        }

        private int gangCombo_;

        /**
         * <pre>
         * 连续杠牌的次数
         * </pre>
         * <p>
         * <code>int32 gang_combo = 3;</code>
         */
        public int getGangCombo() {
            return gangCombo_;
        }

        /**
         * <pre>
         * 连续杠牌的次数
         * </pre>
         * <p>
         * <code>int32 gang_combo = 3;</code>
         */
        public Builder setGangCombo(int value) {

            gangCombo_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 连续杠牌的次数
         * </pre>
         * <p>
         * <code>int32 gang_combo = 3;</code>
         */
        public Builder clearGangCombo() {

            gangCombo_ = 0;
            onChanged();
            return this;
        }

        private int banker_;

        /**
         * <pre>
         * 本轮游戏的庄家ID
         * </pre>
         * <p>
         * <code>int32 banker = 4;</code>
         */
        public int getBanker() {
            return banker_;
        }

        /**
         * <pre>
         * 本轮游戏的庄家ID
         * </pre>
         * <p>
         * <code>int32 banker = 4;</code>
         */
        public Builder setBanker(int value) {

            banker_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 本轮游戏的庄家ID
         * </pre>
         * <p>
         * <code>int32 banker = 4;</code>
         */
        public Builder clearBanker() {

            banker_ = 0;
            onChanged();
            return this;
        }

        private int bankerCombo_;

        /**
         * <pre>
         * 连续当庄家的次数（第一次当，值为1，第二次，值为2）
         * </pre>
         * <p>
         * <code>int32 banker_combo = 5;</code>
         */
        public int getBankerCombo() {
            return bankerCombo_;
        }

        /**
         * <pre>
         * 连续当庄家的次数（第一次当，值为1，第二次，值为2）
         * </pre>
         * <p>
         * <code>int32 banker_combo = 5;</code>
         */
        public Builder setBankerCombo(int value) {

            bankerCombo_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 连续当庄家的次数（第一次当，值为1，第二次，值为2）
         * </pre>
         * <p>
         * <code>int32 banker_combo = 5;</code>
         */
        public Builder clearBankerCombo() {

            bankerCombo_ = 0;
            onChanged();
            return this;
        }

        private com.google.protobuf.ByteString adjunct_ = com.google.protobuf.ByteString.EMPTY;

        /**
         * <pre>
         * 附加的一些判断条件
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public com.google.protobuf.ByteString getAdjunct() {
            return adjunct_;
        }

        /**
         * <pre>
         * 附加的一些判断条件
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public Builder setAdjunct(com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }

            adjunct_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 附加的一些判断条件
         * </pre>
         * <p>
         * <code>bytes adjunct = 6;</code>
         */
        public Builder clearAdjunct() {

            adjunct_ = getDefaultInstance().getAdjunct();
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }


        // @@protoc_insertion_point(builder_scope:majong_rpc.SettleData)
    }

    // @@protoc_insertion_point(class_scope:majong_rpc.SettleData)
    private static final mahjong.mode.proto.SettleData DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new mahjong.mode.proto.SettleData();
    }

    public static mahjong.mode.proto.SettleData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SettleData>
            PARSER = new com.google.protobuf.AbstractParser<SettleData>() {
        public SettleData parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new SettleData(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<SettleData> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SettleData> getParserForType() {
        return PARSER;
    }

    public mahjong.mode.proto.SettleData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

