// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SJ_mahjong.proto

package mahjong.mode.proto;

/**
 * Protobuf type {@code wh_majong.SjSingleSettleResult}
 */
public final class SjSingleSettleResult extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:wh_majong.SjSingleSettleResult)
        SjSingleSettleResultOrBuilder {
    // Use SjSingleSettleResult.newBuilder() to construct.
    private SjSingleSettleResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private SjSingleSettleResult() {
        playerId_ = 0;
        baseScore_ = 0;
        gangScore_ = 0;
        totalScore_ = 0;
        patterns_ = java.util.Collections.emptyList();
        fan_ = 0;
        gangHuScore_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private SjSingleSettleResult(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {

                        playerId_ = input.readInt32();
                        break;
                    }
                    case 16: {

                        baseScore_ = input.readInt32();
                        break;
                    }
                    case 24: {

                        gangScore_ = input.readInt32();
                        break;
                    }
                    case 32: {

                        totalScore_ = input.readInt32();
                        break;
                    }
                    case 40: {
                        int rawValue = input.readEnum();
                        if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                            patterns_ = new java.util.ArrayList<java.lang.Integer>();
                            mutable_bitField0_ |= 0x00000010;
                        }
                        patterns_.add(rawValue);
                        break;
                    }
                    case 42: {
                        int length = input.readRawVarint32();
                        int oldLimit = input.pushLimit(length);
                        while (input.getBytesUntilLimit() > 0) {
                            int rawValue = input.readEnum();
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                patterns_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            patterns_.add(rawValue);
                        }
                        input.popLimit(oldLimit);
                        break;
                    }
                    case 48: {

                        fan_ = input.readInt32();
                        break;
                    }
                    case 56: {

                        gangHuScore_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                patterns_ = java.util.Collections.unmodifiableList(patterns_);
            }
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.proto.SJMahjong.internal_static_wh_majong_SjSingleSettleResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return mahjong.mode.proto.SJMahjong.internal_static_wh_majong_SjSingleSettleResult_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        mahjong.mode.proto.SjSingleSettleResult.class, mahjong.mode.proto.SjSingleSettleResult.Builder.class);
    }

    private int bitField0_;
    public static final int PLAYER_ID_FIELD_NUMBER = 1;
    private int playerId_;

    /**
     * <pre>
     * 玩家ID
     * </pre>
     * <p>
     * <code>int32 player_id = 1;</code>
     */
    public int getPlayerId() {
        return playerId_;
    }

    public static final int BASE_SCORE_FIELD_NUMBER = 2;
    private int baseScore_;

    /**
     * <pre>
     * 基础牌型分
     * </pre>
     * <p>
     * <code>int32 base_score = 2;</code>
     */
    public int getBaseScore() {
        return baseScore_;
    }

    public static final int GANG_SCORE_FIELD_NUMBER = 3;
    private int gangScore_;

    /**
     * <pre>
     * 杠分
     * </pre>
     * <p>
     * <code>int32 gang_score = 3;</code>
     */
    public int getGangScore() {
        return gangScore_;
    }

    public static final int TOTAL_SCORE_FIELD_NUMBER = 4;
    private int totalScore_;

    /**
     * <pre>
     * 总得分
     * </pre>
     * <p>
     * <code>int32 total_score = 4;</code>
     */
    public int getTotalScore() {
        return totalScore_;
    }

    public static final int PATTERNS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> patterns_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
            java.lang.Integer, mahjong.mode.proto.SjSettlePatterns> patterns_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                    java.lang.Integer, mahjong.mode.proto.SjSettlePatterns>() {
                public mahjong.mode.proto.SjSettlePatterns convert(java.lang.Integer from) {
                    mahjong.mode.proto.SjSettlePatterns result = mahjong.mode.proto.SjSettlePatterns.valueOf(from);
                    return result == null ? mahjong.mode.proto.SjSettlePatterns.UNRECOGNIZED : result;
                }
            };

    /**
     * <pre>
     * 牌型结算
     * </pre>
     * <p>
     * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
     */
    public java.util.List<mahjong.mode.proto.SjSettlePatterns> getPatternsList() {
        return new com.google.protobuf.Internal.ListAdapter<
                java.lang.Integer, mahjong.mode.proto.SjSettlePatterns>(patterns_, patterns_converter_);
    }

    /**
     * <pre>
     * 牌型结算
     * </pre>
     * <p>
     * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
     */
    public int getPatternsCount() {
        return patterns_.size();
    }

    /**
     * <pre>
     * 牌型结算
     * </pre>
     * <p>
     * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
     */
    public mahjong.mode.proto.SjSettlePatterns getPatterns(int index) {
        return patterns_converter_.convert(patterns_.get(index));
    }

    /**
     * <pre>
     * 牌型结算
     * </pre>
     * <p>
     * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
     */
    public java.util.List<java.lang.Integer>
    getPatternsValueList() {
        return patterns_;
    }

    /**
     * <pre>
     * 牌型结算
     * </pre>
     * <p>
     * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
     */
    public int getPatternsValue(int index) {
        return patterns_.get(index);
    }

    private int patternsMemoizedSerializedSize;

    public static final int FAN_FIELD_NUMBER = 6;
    private int fan_;

    /**
     * <pre>
     * 番数
     * </pre>
     * <p>
     * <code>int32 fan = 6;</code>
     */
    public int getFan() {
        return fan_;
    }

    public static final int GANG_HU_SCORE_FIELD_NUMBER = 7;
    private int gangHuScore_;

    /**
     * <pre>
     * 杠胡分
     * </pre>
     * <p>
     * <code>int32 gang_hu_score = 7;</code>
     */
    public int getGangHuScore() {
        return gangHuScore_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        getSerializedSize();
        if (playerId_ != 0) {
            output.writeInt32(1, playerId_);
        }
        if (baseScore_ != 0) {
            output.writeInt32(2, baseScore_);
        }
        if (gangScore_ != 0) {
            output.writeInt32(3, gangScore_);
        }
        if (totalScore_ != 0) {
            output.writeInt32(4, totalScore_);
        }
        if (getPatternsList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(patternsMemoizedSerializedSize);
        }
        for (int i = 0; i < patterns_.size(); i++) {
            output.writeEnumNoTag(patterns_.get(i));
        }
        if (fan_ != 0) {
            output.writeInt32(6, fan_);
        }
        if (gangHuScore_ != 0) {
            output.writeInt32(7, gangHuScore_);
        }
    }

    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (playerId_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(1, playerId_);
        }
        if (baseScore_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(2, baseScore_);
        }
        if (gangScore_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(3, gangScore_);
        }
        if (totalScore_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(4, totalScore_);
        }
        {
            int dataSize = 0;
            for (int i = 0; i < patterns_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeEnumSizeNoTag(patterns_.get(i));
            }
            size += dataSize;
            if (!getPatternsList().isEmpty()) {
                size += 1;
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32SizeNoTag(dataSize);
            }
            patternsMemoizedSerializedSize = dataSize;
        }
        if (fan_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(6, fan_);
        }
        if (gangHuScore_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(7, gangHuScore_);
        }
        memoizedSize = size;
        return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof mahjong.mode.proto.SjSingleSettleResult)) {
            return super.equals(obj);
        }
        mahjong.mode.proto.SjSingleSettleResult other = (mahjong.mode.proto.SjSingleSettleResult) obj;

        boolean result = true;
        result = result && (getPlayerId()
                == other.getPlayerId());
        result = result && (getBaseScore()
                == other.getBaseScore());
        result = result && (getGangScore()
                == other.getGangScore());
        result = result && (getTotalScore()
                == other.getTotalScore());
        result = result && patterns_.equals(other.patterns_);
        result = result && (getFan()
                == other.getFan());
        result = result && (getGangHuScore()
                == other.getGangHuScore());
        return result;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PLAYER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerId();
        hash = (37 * hash) + BASE_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getBaseScore();
        hash = (37 * hash) + GANG_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getGangScore();
        hash = (37 * hash) + TOTAL_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getTotalScore();
        if (getPatternsCount() > 0) {
            hash = (37 * hash) + PATTERNS_FIELD_NUMBER;
            hash = (53 * hash) + patterns_.hashCode();
        }
        hash = (37 * hash) + FAN_FIELD_NUMBER;
        hash = (53 * hash) + getFan();
        hash = (37 * hash) + GANG_HU_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getGangHuScore();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.proto.SjSingleSettleResult parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(mahjong.mode.proto.SjSingleSettleResult prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code wh_majong.SjSingleSettleResult}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:wh_majong.SjSingleSettleResult)
            mahjong.mode.proto.SjSingleSettleResultOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.proto.SJMahjong.internal_static_wh_majong_SjSingleSettleResult_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.proto.SJMahjong.internal_static_wh_majong_SjSingleSettleResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.proto.SjSingleSettleResult.class, mahjong.mode.proto.SjSingleSettleResult.Builder.class);
        }

        // Construct using mahjong.mode.proto.SjSingleSettleResult.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        public Builder clear() {
            super.clear();
            playerId_ = 0;

            baseScore_ = 0;

            gangScore_ = 0;

            totalScore_ = 0;

            patterns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            fan_ = 0;

            gangHuScore_ = 0;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.proto.SJMahjong.internal_static_wh_majong_SjSingleSettleResult_descriptor;
        }

        public mahjong.mode.proto.SjSingleSettleResult getDefaultInstanceForType() {
            return mahjong.mode.proto.SjSingleSettleResult.getDefaultInstance();
        }

        public mahjong.mode.proto.SjSingleSettleResult build() {
            mahjong.mode.proto.SjSingleSettleResult result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.proto.SjSingleSettleResult buildPartial() {
            mahjong.mode.proto.SjSingleSettleResult result = new mahjong.mode.proto.SjSingleSettleResult(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.playerId_ = playerId_;
            result.baseScore_ = baseScore_;
            result.gangScore_ = gangScore_;
            result.totalScore_ = totalScore_;
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                patterns_ = java.util.Collections.unmodifiableList(patterns_);
                bitField0_ = (bitField0_ & ~0x00000010);
            }
            result.patterns_ = patterns_;
            result.fan_ = fan_;
            result.gangHuScore_ = gangHuScore_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof mahjong.mode.proto.SjSingleSettleResult) {
                return mergeFrom((mahjong.mode.proto.SjSingleSettleResult) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(mahjong.mode.proto.SjSingleSettleResult other) {
            if (other == mahjong.mode.proto.SjSingleSettleResult.getDefaultInstance()) return this;
            if (other.getPlayerId() != 0) {
                setPlayerId(other.getPlayerId());
            }
            if (other.getBaseScore() != 0) {
                setBaseScore(other.getBaseScore());
            }
            if (other.getGangScore() != 0) {
                setGangScore(other.getGangScore());
            }
            if (other.getTotalScore() != 0) {
                setTotalScore(other.getTotalScore());
            }
            if (!other.patterns_.isEmpty()) {
                if (patterns_.isEmpty()) {
                    patterns_ = other.patterns_;
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    ensurePatternsIsMutable();
                    patterns_.addAll(other.patterns_);
                }
                onChanged();
            }
            if (other.getFan() != 0) {
                setFan(other.getFan());
            }
            if (other.getGangHuScore() != 0) {
                setGangHuScore(other.getGangHuScore());
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            mahjong.mode.proto.SjSingleSettleResult parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (mahjong.mode.proto.SjSingleSettleResult) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private int playerId_;

        /**
         * <pre>
         * 玩家ID
         * </pre>
         * <p>
         * <code>int32 player_id = 1;</code>
         */
        public int getPlayerId() {
            return playerId_;
        }

        /**
         * <pre>
         * 玩家ID
         * </pre>
         * <p>
         * <code>int32 player_id = 1;</code>
         */
        public Builder setPlayerId(int value) {

            playerId_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 玩家ID
         * </pre>
         * <p>
         * <code>int32 player_id = 1;</code>
         */
        public Builder clearPlayerId() {

            playerId_ = 0;
            onChanged();
            return this;
        }

        private int baseScore_;

        /**
         * <pre>
         * 基础牌型分
         * </pre>
         * <p>
         * <code>int32 base_score = 2;</code>
         */
        public int getBaseScore() {
            return baseScore_;
        }

        /**
         * <pre>
         * 基础牌型分
         * </pre>
         * <p>
         * <code>int32 base_score = 2;</code>
         */
        public Builder setBaseScore(int value) {

            baseScore_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 基础牌型分
         * </pre>
         * <p>
         * <code>int32 base_score = 2;</code>
         */
        public Builder clearBaseScore() {

            baseScore_ = 0;
            onChanged();
            return this;
        }

        private int gangScore_;

        /**
         * <pre>
         * 杠分
         * </pre>
         * <p>
         * <code>int32 gang_score = 3;</code>
         */
        public int getGangScore() {
            return gangScore_;
        }

        /**
         * <pre>
         * 杠分
         * </pre>
         * <p>
         * <code>int32 gang_score = 3;</code>
         */
        public Builder setGangScore(int value) {

            gangScore_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 杠分
         * </pre>
         * <p>
         * <code>int32 gang_score = 3;</code>
         */
        public Builder clearGangScore() {

            gangScore_ = 0;
            onChanged();
            return this;
        }

        private int totalScore_;

        /**
         * <pre>
         * 总得分
         * </pre>
         * <p>
         * <code>int32 total_score = 4;</code>
         */
        public int getTotalScore() {
            return totalScore_;
        }

        /**
         * <pre>
         * 总得分
         * </pre>
         * <p>
         * <code>int32 total_score = 4;</code>
         */
        public Builder setTotalScore(int value) {

            totalScore_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 总得分
         * </pre>
         * <p>
         * <code>int32 total_score = 4;</code>
         */
        public Builder clearTotalScore() {

            totalScore_ = 0;
            onChanged();
            return this;
        }

        private java.util.List<java.lang.Integer> patterns_ =
                java.util.Collections.emptyList();

        private void ensurePatternsIsMutable() {
            if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                patterns_ = new java.util.ArrayList<java.lang.Integer>(patterns_);
                bitField0_ |= 0x00000010;
            }
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public java.util.List<mahjong.mode.proto.SjSettlePatterns> getPatternsList() {
            return new com.google.protobuf.Internal.ListAdapter<
                    java.lang.Integer, mahjong.mode.proto.SjSettlePatterns>(patterns_, patterns_converter_);
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public int getPatternsCount() {
            return patterns_.size();
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public mahjong.mode.proto.SjSettlePatterns getPatterns(int index) {
            return patterns_converter_.convert(patterns_.get(index));
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder setPatterns(
                int index, mahjong.mode.proto.SjSettlePatterns value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensurePatternsIsMutable();
            patterns_.set(index, value.getNumber());
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder addPatterns(mahjong.mode.proto.SjSettlePatterns value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensurePatternsIsMutable();
            patterns_.add(value.getNumber());
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder addAllPatterns(
                java.lang.Iterable<? extends mahjong.mode.proto.SjSettlePatterns> values) {
            ensurePatternsIsMutable();
            for (mahjong.mode.proto.SjSettlePatterns value : values) {
                patterns_.add(value.getNumber());
            }
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder clearPatterns() {
            patterns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getPatternsValueList() {
            return java.util.Collections.unmodifiableList(patterns_);
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public int getPatternsValue(int index) {
            return patterns_.get(index);
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder setPatternsValue(
                int index, int value) {
            ensurePatternsIsMutable();
            patterns_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder addPatternsValue(int value) {
            ensurePatternsIsMutable();
            patterns_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌型结算
         * </pre>
         * <p>
         * <code>repeated .wh_majong.SjSettlePatterns patterns = 5;</code>
         */
        public Builder addAllPatternsValue(
                java.lang.Iterable<java.lang.Integer> values) {
            ensurePatternsIsMutable();
            for (int value : values) {
                patterns_.add(value);
            }
            onChanged();
            return this;
        }

        private int fan_;

        /**
         * <pre>
         * 番数
         * </pre>
         * <p>
         * <code>int32 fan = 6;</code>
         */
        public int getFan() {
            return fan_;
        }

        /**
         * <pre>
         * 番数
         * </pre>
         * <p>
         * <code>int32 fan = 6;</code>
         */
        public Builder setFan(int value) {

            fan_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 番数
         * </pre>
         * <p>
         * <code>int32 fan = 6;</code>
         */
        public Builder clearFan() {

            fan_ = 0;
            onChanged();
            return this;
        }

        private int gangHuScore_;

        /**
         * <pre>
         * 杠胡分
         * </pre>
         * <p>
         * <code>int32 gang_hu_score = 7;</code>
         */
        public int getGangHuScore() {
            return gangHuScore_;
        }

        /**
         * <pre>
         * 杠胡分
         * </pre>
         * <p>
         * <code>int32 gang_hu_score = 7;</code>
         */
        public Builder setGangHuScore(int value) {

            gangHuScore_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 杠胡分
         * </pre>
         * <p>
         * <code>int32 gang_hu_score = 7;</code>
         */
        public Builder clearGangHuScore() {

            gangHuScore_ = 0;
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }


        // @@protoc_insertion_point(builder_scope:wh_majong.SjSingleSettleResult)
    }

    // @@protoc_insertion_point(class_scope:wh_majong.SjSingleSettleResult)
    private static final mahjong.mode.proto.SjSingleSettleResult DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new mahjong.mode.proto.SjSingleSettleResult();
    }

    public static mahjong.mode.proto.SjSingleSettleResult getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SjSingleSettleResult>
            PARSER = new com.google.protobuf.AbstractParser<SjSingleSettleResult>() {
        public SjSingleSettleResult parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new SjSingleSettleResult(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<SjSingleSettleResult> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SjSingleSettleResult> getParserForType() {
        return PARSER;
    }

    public mahjong.mode.proto.SjSingleSettleResult getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

